import * as tmicon from "@trendmicro/tmicon";
import * as url from 'url';
import * as path from "path";
import * as fs from "fs";
import { promisify } from "util";
import _ from "lodash";
const { template } = _;

const __filename = url.fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const outDir = "./icons";

function kebabCaseToCapitalizedCamelCase(str) {
  return str
    .split("-")
    .map((part) => part.charAt(0).toUpperCase() + part.slice(1))
    .join("");
}

const iconDefinitions = tmicon.icons.reduce((acc, { name, paths, viewBox }) => {
  return {
    ...acc,
    [name]: {
      svgIdentifier: `${kebabCaseToCapitalizedCamelCase(name)}SVGIcon`,
      svgElements: `<g>${paths.map((path, idx) => `<path key="${name}-${idx}" d="${path}" />`)}</g>`,
      viewBox,
    },
  };
}, {});

const writeFile = promisify(fs.writeFile);

function walk(fn) {
  return Promise.all(
    Object.keys(iconDefinitions).map((svgIdentifier) => {
      const iconDef = iconDefinitions[svgIdentifier];

      return fn({ svgIdentifier, ...iconDef });
    })
  );
}

async function generateIcons() {
  const iconsDir = path.join(__dirname, "./icons");
  try {
    await promisify(fs.access)(iconsDir);
  } catch (err) {
    await promisify(fs.mkdir)(iconsDir);
  }

  const render = template(
    `
// GENERATED BY icon/generate.js
// DON NOT EDIT IT MANUALLY

import * as React from 'react'
import SVGIcon from '../SVGIcon';
import { getIconStyleProps } from '../utils';

const <%= svgIdentifier %> = (
  {
    spin = false,
    ...props
  },
  ref
) => {
  const styleProps = getIconStyleProps({ spin });
  return (
    <SVGIcon ref={ref} viewBox="<%= viewBox %>" {...styleProps} {...props}>
      <%= svgElements %>
    </SVGIcon>
  )
};

if (process.env.NODE_ENV !== 'production') {
  <%= svgIdentifier %>.displayName = '<%= svgIdentifier %>';
}
export default React.forwardRef(<%= svgIdentifier %>);
`.trim()
  );

  await walk(async ({ svgIdentifier, svgElements, viewBox }) => {
    // generate icon file
    await writeFile(
      path.resolve(__dirname, path.join(outDir, `${svgIdentifier}.js`)),
      render({ svgIdentifier, svgElements, viewBox })
    );
  });

  // generate icon index
  const entryText = Object.keys(iconDefinitions)
    .sort()
    .map(
      (key) =>
        `export { default as ${iconDefinitions[key].svgIdentifier} } from './${iconDefinitions[key].svgIdentifier}';`
    )
    .join("\n");

  await promisify(fs.appendFile)(
    path.resolve(__dirname, path.join(outDir, "index.js")),
    `
// GENERATED BY icon/generate.js
// DON NOT EDIT IT MANUALLY

${entryText}
    `.trim()
  );
}

// check if ./icons exists and create it if not
try {
  fs.accessSync(path.resolve(__dirname, outDir));
} catch (err) {
  fs.mkdirSync(path.resolve(__dirname, outDir));
}

// clean up ./icons
fs.readdirSync(path.resolve(__dirname, outDir)).forEach((file) =>
  fs.unlinkSync(path.resolve(__dirname, outDir, file))
);

console.log("Generating icons...");
generateIcons();

