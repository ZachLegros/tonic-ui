import * as tmicon from '@trendmicro/tmicon';
import * as url from 'node:url';
import * as path from 'node:path';
import * as fs from 'node:fs';
import { promisify } from 'node:util';

const __filename = url.fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const outputDirectory = path.resolve(__dirname, '../src/icons');

const renderIconComponentFile = ({
  svgIdentifier,
  svgElements,
  viewBox,
}) => `
// AUTO-GENERATED BY "scripts/generate-icons.mjs"
// DO NOT MODIFY THIS FILE

import React, { forwardRef } from 'react';
import { SVGIcon } from '@tonic-ui/react';
import { getIconStyleProps } from '../utils';

const ${svgIdentifier} = forwardRef((
  {
    spin = false,
    ...props
  },
  ref,
) => {
  const styleProps = getIconStyleProps({ spin });
  return (
    <SVGIcon
      ref={ref}
      viewBox="${viewBox}"
      {...styleProps}
      {...props}
    >
      ${svgElements}
    </SVGIcon>
  );
});

${svgIdentifier}.displayName = '${svgIdentifier}';

export default ${svgIdentifier};
`.trimStart();

const renderIndexFile = ({ defaultImports }) => `
// AUTO-GENERATED BY "scripts/generate-icons.mjs"
// DO NOT MODIFY THIS FILE

${defaultImports.map(defaultImport => (`export { default as ${defaultImport} } from './${defaultImport}';`)).join('\n')}
`.trimStart();

function kebabCaseToCapitalizedCamelCase(str) {
  return str
    .split('-')
    .map((part) => part.charAt(0).toUpperCase() + part.slice(1))
    .join('');
}

const iconDefinitions = tmicon.icons.reduce((acc, { name, paths, viewBox }) => {
  return {
    ...acc,
    [name]: {
      svgIdentifier: `${kebabCaseToCapitalizedCamelCase(name)}Icon`,
      svgElements: `<g>${paths.map((path, idx) => `<path key="${name}-${idx}" d="${path}" />`)}</g>`,
      viewBox,
    },
  };
}, {});

function walk(fn) {
  return Promise.all(
    Object.keys(iconDefinitions).map((svgIdentifier) => {
      const iconDef = iconDefinitions[svgIdentifier];
      return fn({ svgIdentifier, ...iconDef });
    })
  );
}

async function generateIcons() {
  // generate icon component files
  await walk(async ({ svgIdentifier, svgElements, viewBox }) => {
    const file = path.resolve(outputDirectory, `${svgIdentifier}.js`);
    const data = renderIconComponentFile({ svgIdentifier, svgElements, viewBox });
    await promisify(fs.writeFile)(file, data);
  });

  // generate index.js file
  const defaultImports = Object.keys(iconDefinitions)
    .map((key) => iconDefinitions[key].svgIdentifier)
    .sort();
  const file = path.resolve(outputDirectory, 'index.js');
  const data = renderIndexFile({ defaultImports });
  await promisify(fs.writeFile)(file, data);
}

// check if the output directory exists and create it if not
try {
  fs.accessSync(outputDirectory);
} catch (err) {
  fs.mkdirSync(outputDirectory);
}

// clean up the output directory
fs.readdirSync(outputDirectory).forEach((file) => fs.unlinkSync(path.resolve(outputDirectory, file)));

generateIcons();
